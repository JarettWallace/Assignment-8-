A hash table is the right choice for fast lookups because of the constant time complexity it has for insertions and lookups. For example you are able to directly access an index where an item should be stored, doing this allows for faster lookups  as it gets rid of the need to flip through every element. Unlike something l;ike a tree that may have a time complexity of O(n) a hash table in the majority of cases uses O(1) this means that tasks' time of completion does not depend on the size of the data set that is present. 
        To handle collisions I used a technique called separate chaining, this makes it so when two different keys are mapped to the same hash index they are stored in a linked list. Doing this makes it so they are not deleted or overwritten by each other. If a key is inserted that already exists the value associated with that key will be updated this helps ensure that there are little to no redundancies.  
        An engineer might choose a hash table over something like a tree or a list when they have the need for a fast lookup and insertions. A hash table would also be a better option for larger sets of data, unlike a list which could be well suited for a small amount of data. And lastly hashes don't have the need for an order for the data unlike a tree.